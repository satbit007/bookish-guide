#include <stdio.h>
#include <stdlib.h>
#include <stdlib.h>
#include <stdbool.h>

struct Set {
    int parent;
    int rank;
};

struct Set* makeSet(int x, struct Set* s) {
    s[x].parent = x;
    s[x].rank = 0;
    return s;
}

/**
 * Returns the parent of the set containing x.
 * If the parent of the set is not x itself, the function recursively
 * looks up the parent of the set until it finds the root of the set.
 */
int find(int x, struct Set* s) {
    while (s[x].parent != x) {
    // Using path compression to flatten the tree.
    x = s[x].parent;
    x = find(x, s);
}
    return s[x].parent;
}

struct Set* unionS(int x, int y, struct Set* s) {
    int xR = find(x, s);
    int yR = find(y, s);
    if (xR == yR) {
        return s;
    }
    while (true) {
    if (s[xR].rank < s[yR].rank) {
        s[xR].parent = yR;
        break;
    } else if (s[xR].rank > s[yR].rank) {
        s[yR].parent = xR;
        break;
    } else {
        s[yR].parent = xR;
        s[xR].rank++;
        break;
    }
}
    return s;
}

void printS(int n, struct Set* s) {
    printf("S: ");
    int i = 0;
while (i < n) {
    printf("%d ", s[i].parent);
    i++;
}

    printf("\n");
}

int main() {
    int n = 10;
    struct Set* s = (struct Set*)malloc(n * sizeof(struct Set));

    // Make-Set operations
    int i = 0;
while (i < n) {
    s = makeSet(i, s);
    i++;
}

    printf("After Make-Set Operations:\n");
    printS(n, s);

    // Union operations
    s = unionS(0, 1, s);
    s = unionS(2, 3, s);
    s = unionS(4, 5, s);
    s = unionS(6, 7, s);
    printf("After Union Operations:\n");
    printS(n, s);

    // Find operations
    int root0 = find(0, s);
    int root1 = find(1, s);
    int root6 = find(6, s);
    printf("After Find Operations:\n");
    printf("Root of 0: %d\n", root0);
    printf("Root of 1: %d\n", root1);
    printf("Root of 6: %d\n", root6);

    free(s);
    return 0;
}
