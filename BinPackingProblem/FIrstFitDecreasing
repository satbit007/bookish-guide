#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Sorting the elements in decreasing order of weights
void sort(int arr[], int n)
{
    int i = 0, j, temp;
    while (i < n - 1) {
        j = i + 1;
        while (j < n) {
            if (arr[j] > arr[i]) {
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
            j++;
        }
        i++;
    }
}

// Finding the minimum required number of bins
int BinPackingProblem(int weight[], int n, int c)
{
    sort(weight, n);
    int bin_count = 0;
    int bin_capacityleft[n];
    int i, j;

    // Element is stored in the first bin if it has enough space
    for (i = 0; i < n; i++) {
        // Finding the first bin that can take the next element
        j = 0;
        for (j = 0; j < bin_count; j++) {
             if (bin_capacityleft[j] >= weight[i]) {
                 bin_capacityleft[j] -= weight[i];
                 break;
            }
        }

        // New bin is created if no other bin can fit the element
        if (j == bin_count) {
            bin_capacityleft[bin_count] = c - weight[i];
            bin_count++;
        }
    }

    return bin_count;
}

int main()
{
    int weight[] = {5, 7, 5, 2, 4, 2, 5, 1, 6};
    int n = sizeof(weight) / sizeof(weight[0]);
    int c = 10;

    printf("Minimum number of bins required: %d\n",
           BinPackingProblem(weight, n, c));

    return 0;
}
